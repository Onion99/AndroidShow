// ------------------------------------------------------------------------
// Android Studio中的Module主要有两种属性, 主Module - 即AppModule ，次Module - 即依赖库
// 1. application属性 -> apply plugin: ‘com.android.application’ , 可以独立运行的Android程序，也就是我们的APP
// 2. library属性 -> apply plugin: ‘com.android.library’ , 不可以独立运行，一般是Android程序依赖的库文件
// ------------------------------------------------------------------------
plugins {
    id 'com.android.application'
    // ------------------------------------------------------------------------
    // 应用Gradle Kotlin插件
    // 在需要引入项目（可能你是多项目构建，模块）构建脚本下引入插件 -> apply plugin: "kotlin"
    // 如果Gradle版为2.1或以上，则可以在对应需要引入的构建脚本下方便的使用plugins {}脚本块进行快速引入（不需要再buildscript中声名引入了）,就如同这里
    // ------------------------------------------------------------------------
    id 'kotlin-android'
    // ------------------------------------------------------------------------
    // APT 支持
    // 在 Android 插件中，官方已经支持APT了。但是加入 Kotlin 后，由于Kotlin构建环节和Java 有些微妙的变化，因此需要重建这个流程的构建，因此Kotlin为我们提供了另外的插件支持
    // 在本来使用 annotationProcessor依赖方式的依赖上，改为 kapt
    // kapt 不仅仅是会处理 kotlin 的内容，同时也可以处理 java 代码中的内容。
    // kotlin apt 支持生成Kotlin源文件，生成的源文件默认在 processingEnv.options["kapt.kotlin.generated"]路径下，在最终编译时，将会把这个目录下的源文件进行编译。
    // ------------------------------------------------------------------------
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    //id 'dagger.hilt.android.plugin'
    // kotlin-android -> 使用Kotlin插件
    // kotlin-android-extensions-> 使用Kotlin Android扩展插件 ,像这个就可以直接实现DataBinding,废弃了，id混用，非常不好
    // kotlin-kapt -> kotlin注解处理器插件,以AAC系列库的注解使用都依赖这东西
    // kotlin-parcelize -> 自动化处理序列化生成
    // id 'com.onion.versionplugin'
}
// ------------------------------------------------------------------------
// 字符串加密插件, 等同于 apply plugin: 'com.android.application'
// ------------------------------------------------------------------------
apply plugin: StringCare
// ---- 字符串加密 默认配置 ------
stringcare {
    debug false
    assetsFiles = ["*.json"]
    stringFiles = ['strings.xml']
    srcFolders = ['src/main']
}
// ---- 自定义Gradle插件测试 ------
import com.onion.plugin.plugin.TestPlugin
// ---- 插桩测试 ------
apply plugin: TestPlugin
// ------------------------------------------------------------------------
// java和kotlin混合开发 使用Dagger 需要在目标build.gradle(module)的最后添加下面代码，现在为主Module，暂时用不到
// kapt {
//    generateStubs = true
// }
// ------------------------------------------------------------------------

// ---- Url配置 ------
apply from: "$rootDir/plex_config.gradle"


// ------------------------------------------------------------------------
// 统一依赖管理方式
// ---- 1. Kotlin + BuildSrc，支持双向跟踪，依赖更新时会重新构建整个项目 ------
//import com.onion.plugin.dependencies.Deps
// ---- 2. Groovy Ext,主要用这个 ------
//apply from: "$rootDir/dependencies_manager.gradle"
// ---- 3. Composing builds，支持单向跟踪，依赖更新时不会构建整个项目 ------
//import com.onion.versionplugin.DependencyManager
// ---- 4. Version Catalog ------

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"
    defaultConfig {
        applicationId "com.onion.android"
        minSdkVersion 26
        targetSdkVersion 29
        versionCode 2
        versionName "2.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        // Java编译配置参数
        javaCompileOptions {
            // 注解处理
            annotationProcessorOptions {
                arguments += ["room.schemaLocation" : "$projectDir/schemas".toString()]
            }
        }
        javaCompileOptions {
            annotationProcessorOptions {
                arguments["dagger.hilt.disableModulesHaveInstallInCheck"] = "true"
            }
        }
    }

    buildTypes {
        debug{
            buildConfigField "String", "APP_CONFIG", "\"${configs.api}\""
            buildConfigField "String", "APP_STARUP", "\"${configs.api2}\""
        }
        release {
            buildConfigField "String", "APP_CONFIG", "\"${configs.api}\""
            buildConfigField "String", "APP_STARUP", "\"${configs.api2}\""
            // 是否启用代码收缩、混淆和优化
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        // 如果您打算在Kotlin项目中使用数据绑定，则应应用kotlin-kapt插件
        dataBinding true
    }

    lintOptions {
        // true--关闭lint报告的分析进度
        quiet true
        // true--错误发生后停止gradle构建
        abortOnError false
        // true--只报告error
        ignoreWarnings true
        // true--忽略有错误的文件的全/绝对路径(默认是true)
        //absolutePaths true
        // true--检查所有问题点，包含其他默认关闭项
        checkAllWarnings true
        // true--所有warning当做error
        warningsAsErrors true
        // 关闭指定问题检查
        disable 'TypographyFractions','TypographyQuotes'
        // 打开指定问题检查
        enable 'RtlHardcoded','RtlCompat', 'RtlEnabled'
        // 仅检查指定问题
        checkOnly 'NewApi', 'InlinedApi'
        // true--error输出文件不包含源码行号
        noLines true
        // true--显示错误的所有发生位置，不截取
        showAll true
        // 回退lint设置(默认规则)
        lintConfig file("default-lint.xml")
        // true--生成txt格式报告(默认false)
        textReport true
        // 重定向输出；可以是文件或'stdout'
        textOutput 'stdout'
        // true--生成XML格式报告
        xmlReport false
        // 指定xml报告文档(默认lint-results.xml)
        xmlOutput file("lint-report.xml")
        // true--生成HTML报告(带问题解释，源码位置，等)
        htmlReport true
        // html报告可选路径(构建器默认是lint-results.html )
        htmlOutput file("lint-report.html")
        //  true--所有正式版构建执行规则生成崩溃的lint检查，如果有崩溃问题将停止构建
        checkReleaseBuilds true
        // 在发布版本编译时检查(即使不包含lint目标)，指定问题的规则生成崩溃
        fatal 'NewApi', 'InlineApi'
        // 指定问题的规则生成错误
        error 'Wakelock', 'TextViewEdits'
        // 指定问题的规则生成警告
        warning 'ResourceAsColor'
        // 忽略指定问题的规则(同关闭检查)
        ignore 'TypographyQuotes'
    }

    // 添加当期Module目录下的libs路径的库
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
}

// ------------------------------------------------------------------------
// Kotlin 插件默认将 src / main / kotlin /和 src / main / java / 作为 srcDirs路径
// 如果项目对默认路径做了调整，需要重新设置该信息
// sourceSets {
//    main.kotlin.srcDirs += 'src/main/自己的目录' // 让 kotlin 知道哪些目录是存在kotlin代码源文件
// }
// ------------------------------------------------------------------------

dependencies {
    // ---- 添加本地依赖库 ------
    implementation fileTree(dir: 'libs', include: ['*.jar','*.aar'])
    // ------------------------------------------------------------------------
    // Kotlin标准库支持
    // Kotlin代码需要使用的标准函数库，这里在对应的项目下引入标准库即可
    // compile "org.jetbrains.kotlin:kotlin-stdlib-jdk7" // 如果仅需要支持 JDK7的话，直接使用这个
    // compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8" // 如果仅需要支持 JDK8版本的话
    // 其他kotlin库 https://kotlinlang.org/docs/gradle.html
    // https://kotlinlang.org/docs/coroutines-basic-jvm.html#async-returning-a-value-from-a-coroutine
    // ------------------------------------------------------------------------
    implementation deps.kotlin.stdlibJdk8
    // ---- Kotlin 协程 ------
    implementation deps.kotlin.coroutines_android

    // ------------------------------------------------------------------------
    // Android X
    // ------------------------------------------------------------------------
    implementation deps.androidx.appcompat
    implementation deps.androidx.core
    implementation deps.androidx.core_ktx
    implementation deps.androidx.material
    implementation deps.androidx.constraint
    // ---- 投屏 ------
    implementation deps.androidx.mediarouter
    implementation deps.androidx.paging
    // ------------------------------------------------------------------------
    // Google
    // ------------------------------------------------------------------------
    // ---- Dagger Core ------
    implementation      deps.google.dagger
    annotationProcessor deps.google.dagger_compiler
    kapt                deps.google.dagger_compiler
    // ---- Dagger Android ------
    implementation      deps.google.dagger_android
    implementation      deps.google.dagger_android_support
    annotationProcessor deps.google.dagger_android_processor
    kapt                deps.google.dagger_android_processor
    // ---- Hilt,基于Dagger的依赖注入,现项目主用Dagger,所以这个暂时吃灰 ------
    implementation      deps.google.hilt_android
    implementation      deps.google.hilt_common
    implementation      deps.google.hilt_lifecycle
    kapt                deps.google.hilt_compiler_dagger
    kapt                deps.google.hilt_compiler
    // ---- 视频播放器 ------
    implementation  deps.google.gson
    implementation  deps.google.exoplayer
    implementation  deps.google.exoplayer_extension

    // ------------------------------------------------------------------------
    //  Android Architecture Components(AAC)
    // ------------------------------------------------------------------------
    implementation deps.lifecycle.common
    implementation deps.lifecycle.runtime
    implementation deps.lifecycle.viewmodel
    implementation deps.lifecycle.viewmodel_ktx
    implementation deps.lifecycle.livedata
    implementation deps.androidx.room
    implementation deps.androidx.room_ktx
    kapt           deps.androidx.room_compiler
    // ---- Room RxJava Support for Room ------
    implementation deps.androidx.room_rxjava3
    // ------------------------------------------------------------------------
    // Square Up
    // ------------------------------------------------------------------------
    implementation deps.square.retrofit
    implementation deps.square.retrofit_converter_moshi
    implementation deps.square.retrofit_converter_gson
    implementation deps.square.okhttp3_logging
    implementation deps.square.moshi
    kapt           deps.square.moshi_kotlin
    // ------------------------------------------------------------------------
    // Github
    // ------------------------------------------------------------------------
    // ----  UI控件库 ------
    implementation deps.github.glide
    kapt           deps.github.glide_compiler
    implementation deps.github.glide_palette
    implementation deps.github.rainbow
    implementation deps.github.transformation_layout
    implementation deps.github.base_recyclerview_adapter
    implementation deps.github.font_awesome
    implementation deps.github.circle_indicator
    // ---- Timber------
    implementation deps.github.timber
    // ---- Reactive Programming,异步编程 ------
    implementation deps.github.rxjava3_android
    implementation deps.github.rxjava3
    // ---- Retrofit RxJava Adapter ------
    implementation deps.github.rxjava3_retrofit_adapter
    implementation deps.github.rxjava3_bridge
    // ------------------------------------------------------------------------
    // NetCipher: Secured Networking for Android
    // https://dl.bintray.com/guardianproject/CipherKit/info/guardianproject/netcipher/netcipher/
    // NetCipher是一个为android提供的库，它提供了多种手段来改善移动应用程序中的网络安全性(类似于洋葱，匿名代理)。
    // 提供了最佳实践TLS设置使用标准Android HTTP方法，HttpURLConnection和Apache HTTP客户端，提供简单的Tor集成，使它很容易配置代理的HTTP连接和WebView实例。
    // https://github.com/guardianproject/NetCipher
    // - 加强TLS协议支持和密码套件，尤其是在旧版Android（例如4.4及更低版本）
    // - 代理连接支持：通过特定配置对HTTP和HTTPS流量的HTTP和SOCKS代理连接支持
    // - OrbotHelper：支持应用程序与Orbot（Android的Tor）集成的实用类。检查是否安装，自动启动等。
    // - 可选的自定义证书存储，基于open Debian root CA trust store，它是用Mozilla的CA集合构建的
    // - NetCipher还附带了一个helper库，它使webview的代理设置变得很简单
    // ------------------------------------------------------------------------
    implementation deps.github.netcipher
    implementation deps.github.netcipher_okhttp
    implementation deps.github.netcipher_webkit
    // ---- 字符串加密 : https://github.com/StringCare/AndroidLibrary/wiki/Implementation ------
    implementation deps.github.stringcare
    // ------------------------------------------------------------------------
    // 测试相关
    // ------------------------------------------------------------------------
    implementation deps.test.junit
    implementation deps.test.junit_android
    implementation deps.test.espresso
}
apply from: "$rootDir/exclude_other_version.gradle"
